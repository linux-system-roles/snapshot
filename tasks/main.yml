# SPDX-License-Identifier: MIT
---
- name: Set platform/version specific variables
  include_tasks: tasks/set_vars.yml

- name: Enable copr if requested
  include_tasks: enable_copr.yml
  when: snapshot_use_copr | d(false)

- name: Ensure required packages are installed
  package:
    name: "{{ __snapshot_packages }}"
    state: present
    use: "{{ (__snapshot_is_ostree | d(false)) |
              ternary('ansible.posix.rhel_rpm_ostree', omit) }}"

- name: Get snapm version
  check_mode: false
  command: snapm --version
  changed_when: false
  register: __snapshot_snapm_version_output
  # Ignore errors as snapm may not be available
  ignore_errors: true

- name: Set snapm availability fact
  set_fact:
    __snapshot_snapm_available: "{{ __snapshot_snapm_version_output is success }}"

- name: Set snapm version
  set_fact:
    __snapshot_snapm_version: "{{ (__snapshot_snapm_version_output.stdout) }}"
  when:
    - __snapshot_snapm_available

- name: Package snapm version must be 0.4 or later
  fail:
    msg: >
      Package snapm version {{ __snapshot_snapm_version }} is too old -
      must be 0.4 or later
  when:
    - __snapshot_snapm_available
    - __snapshot_snapm_version is version("0.4", "<")

- name: Package snapm required for bootable snapsets
  fail:
    msg: >
      Package snapm is required for bootable snapsets
  when:
    - not __snapshot_snapm_available
    - snapshot_lvm_bootable | d(false)

- name: Package snapm version must be 0.5 or later bootable snapsets
  fail:
    msg: >
      Package snapm version {{ __snapshot_snapm_version }} is too old -
      must be 0.5 or later to use bootable snapsets
  when:
    - __snapshot_snapm_available
    - __snapshot_snapm_version is version("0.5", "<")
    - snapshot_lvm_bootable | d(false)

- name: Run snapshot module and handle errors
  when: snapshot_lvm_action is defined
  block:
    - name: Run snapshot module {{ snapshot_lvm_action }}
      snapshot:
        snapshot_lvm_action: "{{ snapshot_lvm_action }}"
        ansible_check_mode: "{{ ansible_check_mode | d(false) }}"
        snapshot_lvm_all_vgs: "{{ snapshot_lvm_all_vgs | d(false) }}"
        snapshot_lvm_verify_only: "{{ snapshot_lvm_verify_only | d(false) }}"
        snapshot_lvm_mount_origin: "{{ snapshot_lvm_mount_origin | d(false) }}"
        snapshot_lvm_bootable: "{{ snapshot_lvm_bootable | d(false) }}"
        snapshot_lvm_mountpoint_create: "{{
          snapshot_lvm_mountpoint_create | d(false) }}"
        snapshot_lvm_unmount_all: "{{ snapshot_lvm_unmount_all | d(false) }}"
        snapshot_lvm_percent_space_required: "{{
          snapshot_lvm_percent_space_required | d(omit) }}"
        snapshot_lvm_vg: "{{ snapshot_lvm_vg | d(omit) }}"
        snapshot_lvm_lv: "{{ snapshot_lvm_lv | d(omit) }}"
        snapshot_lvm_snapset_name: "{{ snapshot_lvm_snapset_name | d(omit) }}"
        snapshot_lvm_mount_options: "{{ snapshot_lvm_mount_options | d(omit) }}"
        snapshot_lvm_fstype: "{{ snapshot_lvm_fstype | d(omit) }}"
        snapshot_lvm_mountpoint: "{{ snapshot_lvm_mountpoint | d(omit) }}"
        snapshot_lvm_set: "{{ snapshot_lvm_set | d(omit) }}"
        snapshot_lvm_vg_include: "{{ snapshot_lvm_vg_include | d(false) }}"
      register: snapshot_cmd

  rescue:
    - name: Raise error
      fail:
        msg: "{{ ansible_failed_result }}"

  always:
    - name: Print out response
      debug:
        var: snapshot_cmd
        verbosity: 2
      when: snapshot_cmd is defined

    - name: Set result
      set_fact:
        snapshot_cmd: "{{ snapshot_cmd }}"
      when: snapshot_cmd is defined

    - name: Set snapshot_facts to the JSON results
      set_fact:
        snapshot_facts: "{{ snapshot_cmd['data'] }}"
      when: snapshot_cmd is defined and snapshot_lvm_action == "list"

    - name: Show errors
      debug:
        var: snapshot_cmd["errors"]
      when: snapshot_cmd is defined and snapshot_cmd["return_code"] != 0
